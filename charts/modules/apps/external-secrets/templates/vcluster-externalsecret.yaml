{{- $kind := "VclusterExternalSecret" -}}
{{- $root := . -}}
{{- $kindObj := or (get $root.Values $kind) (dict) -}}
{{- range $name, $item := $kindObj.items -}}
  {{- if hasKey $item "enabled" | ternary ($item.enabled) (ne $kindObj.enabled false) }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}
    {{- include "common-gitops.labels.standard" (dict "root" $root "name" $name "kind" $kind) | trim | nindent 2 }}
    {{- with .namespace }}
  namespace: {{ include "common-gitops.tplvalues.render" (dict "value" . "context" $root) }}
    {{- end }}
    {{- $targetSecretName := (kindIs "invalid" .targetSecretName | ternary (include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name)) (include "common-gitops.tplvalues.render" (dict "value" .targetSecretName "context" $root))) }}
    {{- $k8sClusterSecretName := (kindIs "invalid" .k8sClusterSecretName | ternary (include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name)) (include "common-gitops.tplvalues.render" (dict "value" .k8sClusterSecretName "context" $root))) }}
    {{- $k8sClusterEndpoint := (kindIs "invalid" .k8sClusterEndpoint | ternary (include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name)) (include "common-gitops.tplvalues.render" (dict "value" .k8sClusterEndpoint "context" $root))) }}
spec:
  target:
    name: "{{ $targetSecretName }}-cluster"
    creationPolicy: Owner
    deletionPolicy: Delete
    # this is how the Kind=Secret will look like
    template:
      type: Opaque
      engineVersion: v2
      metadata:
    {{- include "common-gitops.annotations" (dict "root" $root "name" $name "kind" $kind) | trim | nindent 8 }}
    {{- include "common-gitops.labels" (dict "root" $root "name" $name "kind" $kind) | trim | nindent 8 }}
      data:
        name: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}
        config: |
          {
    {{- if .argoCdSaTokenSecretName }}
            "bearerToken": "{{ "{{" }} .bearerToken | b64enc {{ "}}" }}",
    {{- end }}
            "tlsClientConfig": {
    {{- if .insecureEnabled }}
              "insecure": true,
    {{- else }}
              "insecure": false,
    {{- end -}}
    {{- if .caDataEnabled }}
              "caData": "{{ "{{" }} .caData | b64enc {{ "}}" }}",
    {{- end }}
              "keyData": "{{ "{{" }} .keyData | b64enc {{ "}}" }}",
              "certData": "{{ "{{" }} .certData | b64enc {{ "}}" }}"
            }
          }
        server: "{{ $k8sClusterEndpoint }}"
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: {{ include "common-gitops.names.itemFullname" (dict "root" $root "name" $name "override" .name) }}
  data:
  - secretKey: caData
    remoteRef:
      key: {{ $k8sClusterSecretName }}
      property: certificate-authority
  - secretKey: certData
    remoteRef:
      key: {{ $k8sClusterSecretName }}
      property: client-certificate
  - secretKey: keyData
    remoteRef:
      key: {{ $k8sClusterSecretName }}
      property: client-key
    {{- if .argoCdSaTokenSecretName }}
  - secretKey: bearerToken
    remoteRef:
      key: {{ .argoCdSaTokenSecretName }}
      property: bearerToken
    {{- end }}
  {{- end }}
{{- end }}
